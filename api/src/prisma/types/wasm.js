
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  trainerId: 'trainerId'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  content: 'content',
  imc: 'imc',
  bodyFat: 'bodyFat',
  weight: 'weight',
  profileId: 'profileId',
  planId: 'planId'
};

exports.Prisma.BodyPartScalarFieldEnum = {
  id: 'id',
  name: 'name',
  bodyFat: 'bodyFat',
  reportId: 'reportId'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  from: 'from',
  to: 'to',
  weekDay: 'weekDay',
  trainerId: 'trainerId',
  traineeId: 'traineeId'
};

exports.Prisma.ActivityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  ACTIVITY_TYPE: 'ACTIVITY_TYPE',
  description: 'description',
  weight: 'weight',
  reps: 'reps',
  sets: 'sets',
  duration: 'duration',
  planId: 'planId',
  reportExerciseId: 'reportExerciseId'
};

exports.Prisma.TrainScalarFieldEnum = {
  id: 'id',
  from: 'from',
  to: 'to',
  planId: 'planId'
};

exports.Prisma.ExerciseScalarFieldEnum = {
  id: 'id',
  weight: 'weight',
  reps: 'reps',
  sets: 'sets',
  duration: 'duration',
  description: 'description',
  activityId: 'activityId',
  trainId: 'trainId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.WEEK_DAYS = exports.$Enums.WEEK_DAYS = {
  SUNDAY: 'SUNDAY',
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY'
};

exports.ACTIVITY_TYPE = exports.$Enums.ACTIVITY_TYPE = {
  CARDIO: 'CARDIO',
  STRENGTH: 'STRENGTH',
  FLEXIBILITY: 'FLEXIBILITY',
  BALANCE: 'BALANCE'
};

exports.Prisma.ModelName = {
  Profile: 'Profile',
  Report: 'Report',
  BodyPart: 'BodyPart',
  Plan: 'Plan',
  Activity: 'Activity',
  Train: 'Train',
  Exercise: 'Exercise'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/tutuacs/Desktop/proj_tematico_2/api/src/prisma/types",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/tutuacs/Desktop/proj_tematico_2/api/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.1",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/prisma/types\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Profile {\n  id       String  @id @default(uuid())\n  name     String?\n  email    String  @unique\n  password String\n  role     Int     @default(0)\n\n  Trainee   Profile[] @relation(\"GymEntitys\")\n  Trainer   Profile?  @relation(\"GymEntitys\", fields: [trainerId], references: [id])\n  trainerId String?\n\n  Plans  Plan[]\n  Report Report[]\n}\n\nmodel Report {\n  id        String   @id @default(uuid())\n  createdAt DateTime @default(now())\n  content   String?\n  imc       Float?\n  bodyFat   Float?\n  weight    Float?\n\n  BodyPart  BodyPart[]\n  Profile   Profile    @relation(fields: [profileId], references: [id])\n  profileId String\n  Plan      Plan?      @relation(fields: [planId], references: [id])\n  planId    String?\n}\n\nmodel BodyPart {\n  id       String @id @default(uuid())\n  name     String\n  bodyFat  Float?\n  Report   Report @relation(fields: [reportId], references: [id])\n  reportId String\n}\n\nmodel Plan {\n  id          String    @id @default(uuid())\n  title       String\n  description String?\n  from        DateTime  @default(now())\n  to          DateTime  @updatedAt\n  weekDay     WEEK_DAYS\n\n  trainerId String\n\n  Trainee   Profile    @relation(fields: [traineeId], references: [id])\n  traineeId String\n  Activity  Activity[]\n  Train     Train[]\n  Report    Report[]\n}\n\nmodel Activity {\n  id               String        @id @default(uuid())\n  name             String\n  ACTIVITY_TYPE    ACTIVITY_TYPE\n  description      String?\n  weight           Float?\n  reps             Int?\n  sets             Int?\n  duration         Int? // Duration in seconds\n  planId           String\n  Plan             Plan          @relation(fields: [planId], references: [id])\n  Exercise         Exercise[]\n  reportExerciseId String?       @unique\n}\n\nmodel Train {\n  id       String     @id @default(uuid())\n  from     DateTime\n  to       DateTime\n  Plan     Plan       @relation(fields: [planId], references: [id])\n  planId   String\n  Exercise Exercise[]\n}\n\nmodel Exercise {\n  id String @id @default(uuid())\n\n  weight      Float?\n  reps        Int?\n  sets        Int?\n  duration    Int?\n  description String?\n\n  Activity   Activity @relation(fields: [activityId], references: [id])\n  activityId String\n  Train      Train    @relation(fields: [trainId], references: [id])\n  trainId    String\n}\n\nenum WEEK_DAYS {\n  SUNDAY\n  MONDAY\n  TUESDAY\n  WEDNESDAY\n  THURSDAY\n  FRIDAY\n  SATURDAY\n}\n\nenum ACTIVITY_TYPE {\n  CARDIO\n  STRENGTH\n  FLEXIBILITY\n  BALANCE\n}\n",
  "inlineSchemaHash": "02ea45bb93f1e818a3c8540493aa4eee6c94872ac8113341c701d57031368c22",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Profile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"Trainee\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"GymEntitys\"},{\"name\":\"Trainer\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"GymEntitys\"},{\"name\":\"trainerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Plans\",\"kind\":\"object\",\"type\":\"Plan\",\"relationName\":\"PlanToProfile\"},{\"name\":\"Report\",\"kind\":\"object\",\"type\":\"Report\",\"relationName\":\"ProfileToReport\"}],\"dbName\":null},\"Report\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imc\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"bodyFat\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"weight\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"BodyPart\",\"kind\":\"object\",\"type\":\"BodyPart\",\"relationName\":\"BodyPartToReport\"},{\"name\":\"Profile\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"ProfileToReport\"},{\"name\":\"profileId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Plan\",\"kind\":\"object\",\"type\":\"Plan\",\"relationName\":\"PlanToReport\"},{\"name\":\"planId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"BodyPart\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bodyFat\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"Report\",\"kind\":\"object\",\"type\":\"Report\",\"relationName\":\"BodyPartToReport\"},{\"name\":\"reportId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Plan\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"from\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"to\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"weekDay\",\"kind\":\"enum\",\"type\":\"WEEK_DAYS\"},{\"name\":\"trainerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Trainee\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"PlanToProfile\"},{\"name\":\"traineeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Activity\",\"kind\":\"object\",\"type\":\"Activity\",\"relationName\":\"ActivityToPlan\"},{\"name\":\"Train\",\"kind\":\"object\",\"type\":\"Train\",\"relationName\":\"PlanToTrain\"},{\"name\":\"Report\",\"kind\":\"object\",\"type\":\"Report\",\"relationName\":\"PlanToReport\"}],\"dbName\":null},\"Activity\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ACTIVITY_TYPE\",\"kind\":\"enum\",\"type\":\"ACTIVITY_TYPE\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"weight\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"reps\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sets\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"planId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Plan\",\"kind\":\"object\",\"type\":\"Plan\",\"relationName\":\"ActivityToPlan\"},{\"name\":\"Exercise\",\"kind\":\"object\",\"type\":\"Exercise\",\"relationName\":\"ActivityToExercise\"},{\"name\":\"reportExerciseId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Train\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"from\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"to\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Plan\",\"kind\":\"object\",\"type\":\"Plan\",\"relationName\":\"PlanToTrain\"},{\"name\":\"planId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Exercise\",\"kind\":\"object\",\"type\":\"Exercise\",\"relationName\":\"ExerciseToTrain\"}],\"dbName\":null},\"Exercise\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"weight\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"reps\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sets\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Activity\",\"kind\":\"object\",\"type\":\"Activity\",\"relationName\":\"ActivityToExercise\"},{\"name\":\"activityId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Train\",\"kind\":\"object\",\"type\":\"Train\",\"relationName\":\"ExerciseToTrain\"},{\"name\":\"trainId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

